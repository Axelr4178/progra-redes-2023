{
	"info": {
		"_postman_id": "64bd5df4-8d4f-4cce-9c9d-7ae95379a753",
		"name": "Axel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30540104"
	},
	"item": [
		{
			"name": "Albumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"apellido\": \"Arredondo\",\n        \"domicilio\": \"Calle 321, No. 321, Col. Esquina\",\n        \"edad\": 40,\n        \"fechaNacimiento\": \"1999-09-09\",\n        \"idPaciente\": 123,\n        \"nombre\": \"Manuel\",\n        \"sexo\": \"M\",\n        \"telefono\": \"666-123-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:5000/albumes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"albumes"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Albumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"artista\": \"Michael Jackson\",\n        \"año_lanzamiento\": 1999,\n        \"duracion_total\": \"01:56:50\",\n        \"fecha_publicacion\": \"1982-11-30\",\n        \"genero\": \"Pop, rock, funk, TestPOST\",\n        \"id_album\": 1,\n        \"numero_canciones\": 9,\n        \"pais_origen\": \"USA\",\n        \"sello_discografico\": \"Epic Records\",\n        \"titulo\": \"Thriller\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/albumes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"albumes"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Albumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"artista\": \"Mon laferte\",\n        \"año_lanzamiento\": 1993,\n        \"duracion_total\": \"04:18:00\",\n        \"fecha_publicacion\": \"2013-09-15\",\n        \"genero\": \"Amor\",\n        \"id_album\": 7,\n        \"numero_canciones\": 6,\n        \"pais_origen\": \"Mexico\",\n        \"sello_discografico\": \"Mon laferte\",\n        \"titulo\": \"Tu falta de querer\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/albumes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"albumes"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Albumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"id_album\": 7\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/albumes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"albumes"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "canciones",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/canciones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"canciones"
					]
				}
			},
			"response": []
		},
		{
			"name": "canciones",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"año_lanzamiento\": 1989,\n        \"compositor\": \"Michael Jackson\",\n        \"duracion\": \"04:58:01\",\n        \"genero\": \"Pop, rock, funk, cumbia\",\n        \"id_album\": 1,\n        \"id_cancion\": 1,\n        \"idioma\": \"Inglés\",\n        \"numero_pista\": 1,\n        \"titulo\": \"Billie Jean TEST\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/canciones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"canciones"
					]
				}
			},
			"response": []
		},
		{
			"name": "canciones",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"año_lanzamiento\": 1997,\n        \"compositor\": \"Thom Yorke\",\n        \"duracion\": \"06:26:11\",\n        \"genero\": \"Rock alternativo, regeton\",\n        \"id_album\": 1,\n        \"id_cancion\": 5,\n        \"idioma\": \"Inglés\",\n        \"numero_pista\": 2,\n        \"titulo\": \"Paranoid Android\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/canciones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"canciones"
					]
				}
			},
			"response": []
		},
		{
			"name": "canciones",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n \n        \"id_cancion\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/canciones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"canciones"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}